// Thanks to https://github.com/Arachnid/evmdis . It analyzed and optimized the assembly well.

# Stack: []
0x4	MSTORE(0x40, 0x80)
0xC	JUMPI(:label0, CALLDATASIZE() < 0x4)

# Stack: []
0xF	PUSH(CALLDATALOAD(0x0))
0x10	PUSH(0x100000000000000000000000000000000000000000000000000000000)
0x2E	SWAP1
0x35	PUSH(0xFFFFFFFF & POP(@0xF) / POP(0x100000000000000000000000000000000000000000000000000000000))
0x36	DUP1
0x40	JUMPI(:label1, 0x5F2BD1F == POP(@0x35))

# Stack: [@0x35]
0x41	DUP1
0x4B	JUMPI(:label4, 0x6FDDE03 == POP(@0x35))

# Stack: [@0x35]
0x4C	DUP1
0x56	JUMPI(:label10, 0x9AF8FFE == POP(@0x35))

# Stack: [@0x35]
0x57	DUP1
0x61	JUMPI(:label13, 0x30499C20 == POP(@0x35))

# Stack: [@0x35]
0x62	DUP1
0x6C	JUMPI(:label16, 0x3438E82C == POP(@0x35))

# Stack: [@0x35]
0x6D	DUP1
0x77	JUMPI(:label19, 0x6B574199 == POP(@0x35))

# Stack: [@0x35]
0x78	DUP1
0x82	JUMPI(:label22, 0x759014F0 == POP(@0x35))

# Stack: [@0x35]
0x83	DUP1
0x8D	JUMPI(:label25, 0x890EBA68 == POP(@0x35))

# Stack: [@0x35]
0x8E	DUP1
0x98	JUMPI(:label31, 0x979EA13B == POP(@0x35))

# Stack: [@0x35]
0x99	DUP1
0xA3	JUMPI(:label34, 0xF9633930 == POP(@0x35))

:label0
# Stack: []
0xA5	PUSH(0x0)
0xA7	DUP1
0xA8	REVERT()

:label1
# Stack: [@0x35]
0xAA	PUSH(CALLVALUE())
0xAB	DUP1
0xB0	JUMPI(:label2, !POP(@0xAA))

# Stack: [@0xAA @0x35]
0xB1	PUSH(0x0)
0xB3	DUP1
0xB4	REVERT()

:label2
# Stack: [@0xAA @0x35]
0xB6	POP()
0xB7	PUSH(:label3)
0xBD	JUMP(:label40)

:label3
# Stack: [@0x41F :label3 @0x35]
0xC1	PUSH(MLOAD(0x40))
0xC2	DUP1
0xC3	DUP3
0xCC	DUP1
0xCD	MSTORE(POP(@0xC1), ~0x0 & ~0x0 & POP(@0x41F))
0xD0	PUSH(0x20 + POP(@0xC1))
0xD1	SWAP2
0xD2	POP()
0xD3	POP()
0xD6	PUSH(MLOAD(0x40))
0xD7	DUP1
0xD8	SWAP2
0xD9	PUSH(POP(@0xD0) - POP(@0xD6))
0xDA	SWAP1
0xDB	RETURN(POP(@0xD6), POP(@0xD9))

:label4
# Stack: [@0x35]
0xDD	PUSH(CALLVALUE())
0xDE	DUP1
0xE3	JUMPI(:label5, !POP(@0xDD))

# Stack: [@0xDD @0x35]
0xE4	PUSH(0x0)
0xE6	DUP1
0xE7	REVERT()

:label5
# Stack: [@0xDD @0x35]
0xE9	POP()
0xEA	PUSH(:label6)
0xF0	JUMP(:label41)

:label6
# Stack: [@0x447 :label6 @0x35]
0xF4	PUSH(MLOAD(0x40))
0xF5	DUP1
0xF6	DUP1
0xF9	PUSH(0x20 + POP(@0xF4))
0xFA	DUP3
0xFB	DUP2
0xFD	DUP2
0xFE	MSTORE(POP(@0xF4), POP(@0xF9) - POP(@0xF4))
0xFF	DUP4
0x100	DUP2
0x101	DUP2
0x103	DUP1
0x104	MSTORE(POP(@0xF9), MLOAD(POP(@0x447)))
0x107	PUSH(0x20 + POP(@0xF9))
0x108	SWAP2
0x109	POP()
0x10A	DUP1
0x10B	PUSH(MLOAD(POP(@0x447)))
0x10C	SWAP1
0x10F	PUSH(0x20 + POP(@0x447))
0x110	SWAP1
0x111	DUP1
0x112	DUP4
0x113	DUP4
0x114	PUSH(0x0)

:label7
# Stack: [[0x0 | @0x12A] @0x10F @0x107 @0x10B @0x10B @0x10F @0x107 @0xF4 @0xF4 @0x447 :label6 @0x35]
0x117	DUP4
0x118	DUP2
0x11E	JUMPI(:label8, !(POP() < POP(@0x10B)))

# Stack: [[0x0 | @0x12A] @0x10F @0x107 @0x10B @0x10B @0x10F @0x107 @0xF4 @0xF4 @0x447 :label6 @0x35]
0x11F	DUP1
0x120	DUP3
0x123	DUP1
0x124	DUP4
0x126	MSTORE(POP(@0x107) + POP(), MLOAD(POP(@0x10F) + POP()))
0x129	DUP1
0x12A	PUSH(POP() + 0x20)
0x12B	SWAP1
0x12C	POP()
0x130	JUMP(:label7)

:label8
# Stack: [[@0x12A | 0x0] @0x10F @0x107 @0x10B @0x10B @0x10F @0x107 @0xF4 @0xF4 @0x447 :label6 @0x35]
0x132	POP()
0x133	POP()
0x134	POP()
0x135	POP()
0x136	SWAP1
0x137	POP()
0x138	SWAP1
0x139	DUP2
0x13A	PUSH(POP(@0x10B) + POP(@0x107))
0x13B	SWAP1
0x13E	PUSH(0x1F & POP(@0x10B))
0x13F	DUP1
0x144	JUMPI(:label9, !POP(@0x13E))

# Stack: [@0x13E @0x13A @0xF4 @0xF4 @0x447 :label6 @0x35]
0x145	DUP1
0x146	DUP3
0x147	PUSH(POP(@0x13A) - POP(@0x13E))
0x148	DUP1
0x14C	DUP2
0x157	DUP1
0x158	MSTORE(POP(@0x147), ~(0x100 ** (0x20 - POP(@0x13E)) - 0x1) & MLOAD(POP(@0x147)))
0x15B	PUSH(0x20 + POP(@0x147))
0x15C	SWAP2
0x15D	POP()

:label9
# Stack: [@0x13E [@0x15B | @0x13A] @0xF4 @0xF4 @0x447 :label6 @0x35]
0x15F	POP()
0x160	SWAP3
0x161	POP()
0x162	POP()
0x163	POP()
0x166	PUSH(MLOAD(0x40))
0x167	DUP1
0x168	SWAP2
0x169	PUSH(POP() - POP(@0x166))
0x16A	SWAP1
0x16B	RETURN(POP(@0x166), POP(@0x169))

:label10
# Stack: [@0x35]
0x16D	PUSH(CALLVALUE())
0x16E	DUP1
0x173	JUMPI(:label11, !POP(@0x16D))

# Stack: [@0x16D @0x35]
0x174	PUSH(0x0)
0x176	DUP1
0x177	REVERT()

:label11
# Stack: [@0x16D @0x35]
0x179	POP()
0x17A	PUSH(:label12)
0x17D	PUSH(0x4)
0x17F	DUP1
0x182	DUP1
0x183	PUSH(POP(0x4) + CALLDATASIZE() - POP(0x4))
0x184	SWAP1
0x185	DUP1
0x186	DUP1
0x18B	PUSH(~0x0 & CALLDATALOAD(POP(0x4)))
0x18C	SWAP1
0x18F	PUSH(0x20 + POP(0x4))
0x190	SWAP1
0x191	SWAP3
0x192	SWAP2
0x193	SWAP1
0x194	POP()
0x195	POP()
0x196	POP()
0x19A	JUMP(:label45)

:label12
# Stack: [@0x35]
0x19C	STOP()

:label13
# Stack: [@0x35]
0x19E	PUSH(CALLVALUE())
0x19F	DUP1
0x1A4	JUMPI(:label14, !POP(@0x19E))

# Stack: [@0x19E @0x35]
0x1A5	PUSH(0x0)
0x1A7	DUP1
0x1A8	REVERT()

:label14
# Stack: [@0x19E @0x35]
0x1AA	POP()
0x1AB	PUSH(:label15)
0x1B1	JUMP(:label47)

:label15
# Stack: [@0x53A :label15 @0x35]
0x1B5	PUSH(MLOAD(0x40))
0x1B6	DUP1
0x1B7	DUP3
0x1C0	DUP1
0x1C1	MSTORE(POP(@0x1B5), ~0x0 & ~0x0 & POP(@0x53A))
0x1C4	PUSH(0x20 + POP(@0x1B5))
0x1C5	SWAP2
0x1C6	POP()
0x1C7	POP()
0x1CA	PUSH(MLOAD(0x40))
0x1CB	DUP1
0x1CC	SWAP2
0x1CD	PUSH(POP(@0x1C4) - POP(@0x1CA))
0x1CE	SWAP1
0x1CF	RETURN(POP(@0x1CA), POP(@0x1CD))

:label16
# Stack: [@0x35]
0x1D1	PUSH(CALLVALUE())
0x1D2	DUP1
0x1D7	JUMPI(:label17, !POP(@0x1D1))

# Stack: [@0x1D1 @0x35]
0x1D8	PUSH(0x0)
0x1DA	DUP1
0x1DB	REVERT()

:label17
# Stack: [@0x1D1 @0x35]
0x1DD	POP()
0x1DE	PUSH(:label18)
0x1E1	PUSH(0x4)
0x1E3	DUP1
0x1E6	DUP1
0x1E7	PUSH(POP(0x4) + CALLDATASIZE() - POP(0x4))
0x1E8	SWAP1
0x1E9	DUP1
0x1EA	DUP1
0x1EB	PUSH(CALLDATALOAD(POP(0x4)))
0x1EC	SWAP1
0x1EF	PUSH(0x20 + POP(0x4))
0x1F0	SWAP1
0x1F1	DUP3
0x1F2	PUSH(POP(0x4) + POP(@0x1EB))
0x1F3	DUP1
0x1F4	PUSH(CALLDATALOAD(POP(@0x1F2)))
0x1F5	SWAP1
0x1F8	PUSH(0x20 + POP(@0x1F2))
0x1F9	SWAP1
0x1FA	DUP1
0x1FB	DUP1
0x1FE	PUSH(0x1F + POP(@0x1F4))
0x1FF	PUSH(0x20)
0x201	DUP1
0x202	SWAP2
0x207	PUSH(0x20 + POP(@0x1FE) / POP(0x20) * POP(0x20))
0x20A	PUSH(MLOAD(0x40))
0x20B	SWAP1
0x20C	DUP2
0x210	MSTORE(0x40, POP(@0x20A) + POP(@0x207))
0x211	DUP1
0x212	SWAP4
0x213	SWAP3
0x214	SWAP2
0x215	SWAP1
0x216	DUP2
0x217	DUP2
0x218	MSTORE(POP(@0x20A), POP(@0x1F4))
0x21B	PUSH(0x20 + POP(@0x20A))
0x21C	DUP4
0x21D	DUP4
0x21E	DUP1
0x21F	DUP3
0x220	DUP5
0x221	CALLDATACOPY(POP(@0x21B), POP(@0x1F8), POP(@0x1F4))
0x222	DUP3
0x223	PUSH(POP(@0x21B) + POP(@0x1F4))
0x224	SWAP2
0x225	POP()
0x226	POP()
0x227	POP()
0x228	POP()
0x229	POP()
0x22A	POP()
0x22B	SWAP2
0x22C	SWAP3
0x22D	SWAP2
0x22E	SWAP3
0x22F	SWAP1
0x230	POP()
0x231	POP()
0x232	POP()
0x236	JUMP(:label48)

:label18
# Stack: [@0x35]
0x238	STOP()

:label19
# Stack: [@0x35]
0x23A	PUSH(CALLVALUE())
0x23B	DUP1
0x240	JUMPI(:label20, !POP(@0x23A))

# Stack: [@0x23A @0x35]
0x241	PUSH(0x0)
0x243	DUP1
0x244	REVERT()

:label20
# Stack: [@0x23A @0x35]
0x246	POP()
0x247	PUSH(:label21)
0x24A	PUSH(0x4)
0x24C	DUP1
0x24F	DUP1
0x250	PUSH(POP(0x4) + CALLDATASIZE() - POP(0x4))
0x251	SWAP1
0x252	DUP1
0x253	DUP1
0x258	PUSH(~0x0 & CALLDATALOAD(POP(0x4)))
0x259	SWAP1
0x25C	PUSH(0x20 + POP(0x4))
0x25D	SWAP1
0x25E	SWAP3
0x25F	SWAP2
0x260	SWAP1
0x261	DUP1
0x278	PUSH(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & CALLDATALOAD(POP(@0x25C)))
0x279	SWAP1
0x27C	PUSH(0x20 + POP(@0x25C))
0x27D	SWAP1
0x27E	SWAP3
0x27F	SWAP2
0x280	SWAP1
0x281	POP()
0x282	POP()
0x283	POP()
0x287	JUMP(:label50)

:label21
# Stack: [@0x35]
0x289	STOP()

:label22
# Stack: [@0x35]
0x28B	PUSH(CALLVALUE())
0x28C	DUP1
0x291	JUMPI(:label23, !POP(@0x28B))

# Stack: [@0x28B @0x35]
0x292	PUSH(0x0)
0x294	DUP1
0x295	REVERT()

:label23
# Stack: [@0x28B @0x35]
0x297	POP()
0x298	PUSH(:label24)
0x29E	JUMP(:label52)

:label24
# Stack: [@0x5DB @0x35]
0x2A2	PUSH(MLOAD(0x40))
0x2A3	DUP1
0x2A4	DUP3
0x2AD	DUP1
0x2AE	MSTORE(POP(@0x2A2), ~0x0 & ~0x0 & POP(@0x5DB))
0x2B1	PUSH(0x20 + POP(@0x2A2))
0x2B2	SWAP2
0x2B3	POP()
0x2B4	POP()
0x2B7	PUSH(MLOAD(0x40))
0x2B8	DUP1
0x2B9	SWAP2
0x2BA	PUSH(POP(@0x2B1) - POP(@0x2B7))
0x2BB	SWAP1
0x2BC	RETURN(POP(@0x2B7), POP(@0x2BA))

:label25
# Stack: [@0x35]
0x2BE	PUSH(CALLVALUE())
0x2BF	DUP1
0x2C4	JUMPI(:label26, !POP(@0x2BE))

# Stack: [@0x2BE @0x35]
0x2C5	PUSH(0x0)
0x2C7	DUP1
0x2C8	REVERT()

:label26
# Stack: [@0x2BE @0x35]
0x2CA	POP()
0x2CB	PUSH(:label27)
0x2D1	JUMP(:label53)

:label27
# Stack: [@0x605 :label27 @0x35]
0x2D5	PUSH(MLOAD(0x40))
0x2D6	DUP1
0x2D7	DUP1
0x2DA	PUSH(0x20 + POP(@0x2D5))
0x2DB	DUP3
0x2DC	DUP2
0x2DE	DUP2
0x2DF	MSTORE(POP(@0x2D5), POP(@0x2DA) - POP(@0x2D5))
0x2E0	DUP4
0x2E1	DUP2
0x2E2	DUP2
0x2E4	DUP1
0x2E5	MSTORE(POP(@0x2DA), MLOAD(POP(@0x605)))
0x2E8	PUSH(0x20 + POP(@0x2DA))
0x2E9	SWAP2
0x2EA	POP()
0x2EB	DUP1
0x2EC	PUSH(MLOAD(POP(@0x605)))
0x2ED	SWAP1
0x2F0	PUSH(0x20 + POP(@0x605))
0x2F1	SWAP1
0x2F2	DUP1
0x2F3	DUP4
0x2F4	DUP4
0x2F5	PUSH(0x0)

:label28
# Stack: [[@0x30B | 0x0] @0x2F0 @0x2E8 @0x2EC @0x2EC @0x2F0 @0x2E8 @0x2D5 @0x2D5 @0x605 :label27 @0x35]
0x2F8	DUP4
0x2F9	DUP2
0x2FF	JUMPI(:label29, !(POP() < POP(@0x2EC)))

# Stack: [[0x0 | @0x30B] @0x2F0 @0x2E8 @0x2EC @0x2EC @0x2F0 @0x2E8 @0x2D5 @0x2D5 @0x605 :label27 @0x35]
0x300	DUP1
0x301	DUP3
0x304	DUP1
0x305	DUP4
0x307	MSTORE(POP(@0x2E8) + POP(), MLOAD(POP(@0x2F0) + POP()))
0x30A	DUP1
0x30B	PUSH(POP() + 0x20)
0x30C	SWAP1
0x30D	POP()
0x311	JUMP(:label28)

:label29
# Stack: [[@0x30B | 0x0] @0x2F0 @0x2E8 @0x2EC @0x2EC @0x2F0 @0x2E8 @0x2D5 @0x2D5 @0x605 :label27 @0x35]
0x313	POP()
0x314	POP()
0x315	POP()
0x316	POP()
0x317	SWAP1
0x318	POP()
0x319	SWAP1
0x31A	DUP2
0x31B	PUSH(POP(@0x2EC) + POP(@0x2E8))
0x31C	SWAP1
0x31F	PUSH(0x1F & POP(@0x2EC))
0x320	DUP1
0x325	JUMPI(:label30, !POP(@0x31F))

# Stack: [@0x31F @0x31B @0x2D5 @0x2D5 @0x605 :label27 @0x35]
0x326	DUP1
0x327	DUP3
0x328	PUSH(POP(@0x31B) - POP(@0x31F))
0x329	DUP1
0x32D	DUP2
0x338	DUP1
0x339	MSTORE(POP(@0x328), ~(0x100 ** (0x20 - POP(@0x31F)) - 0x1) & MLOAD(POP(@0x328)))
0x33C	PUSH(0x20 + POP(@0x328))
0x33D	SWAP2
0x33E	POP()

:label30
# Stack: [@0x31F [@0x33C | @0x31B] @0x2D5 @0x2D5 @0x605 :label27 @0x35]
0x340	POP()
0x341	SWAP3
0x342	POP()
0x343	POP()
0x344	POP()
0x347	PUSH(MLOAD(0x40))
0x348	DUP1
0x349	SWAP2
0x34A	PUSH(POP() - POP(@0x347))
0x34B	SWAP1
0x34C	RETURN(POP(@0x347), POP(@0x34A))

:label31
# Stack: [@0x35]
0x34E	PUSH(CALLVALUE())
0x34F	DUP1
0x354	JUMPI(:label32, !POP(@0x34E))

# Stack: [@0x34E @0x35]
0x355	PUSH(0x0)
0x357	DUP1
0x358	REVERT()

:label32
# Stack: [@0x34E @0x35]
0x35A	POP()
0x35B	PUSH(:label33)
0x35E	PUSH(0x4)
0x360	DUP1
0x363	DUP1
0x364	PUSH(POP(0x4) + CALLDATASIZE() - POP(0x4))
0x365	SWAP1
0x366	DUP1
0x367	DUP1
0x36C	PUSH(~0x0 & CALLDATALOAD(POP(0x4)))
0x36D	SWAP1
0x370	PUSH(0x20 + POP(0x4))
0x371	SWAP1
0x372	SWAP3
0x373	SWAP2
0x374	SWAP1
0x375	DUP1
0x37A	PUSH(~0x0 & CALLDATALOAD(POP(@0x370)))
0x37B	SWAP1
0x37E	PUSH(0x20 + POP(@0x370))
0x37F	SWAP1
0x380	SWAP3
0x381	SWAP2
0x382	SWAP1
0x383	POP()
0x384	POP()
0x385	POP()
0x389	JUMP(:label57)

:label33
# Stack: [@0x35]
0x38B	STOP()

:label34
# Stack: [@0x35]
0x38D	PUSH(CALLVALUE())
0x38E	DUP1
0x393	JUMPI(:label35, !POP(@0x38D))

# Stack: [@0x38D @0x35]
0x394	PUSH(0x0)
0x396	DUP1
0x397	REVERT()

:label35
# Stack: [@0x38D @0x35]
0x399	POP()
0x39A	PUSH(:label36)
0x3A0	JUMP(:label59)

:label36
# Stack: [@0x6CC @0x35]
0x3A4	PUSH(MLOAD(0x40))
0x3A5	DUP1
0x3A6	DUP1
0x3A9	PUSH(0x20 + POP(@0x3A4))
0x3AA	DUP3
0x3AB	DUP2
0x3AD	DUP2
0x3AE	MSTORE(POP(@0x3A4), POP(@0x3A9) - POP(@0x3A4))
0x3AF	DUP4
0x3B0	DUP2
0x3B1	DUP2
0x3B3	DUP1
0x3B4	MSTORE(POP(@0x3A9), MLOAD(POP(@0x6CC)))
0x3B7	PUSH(0x20 + POP(@0x3A9))
0x3B8	SWAP2
0x3B9	POP()
0x3BA	DUP1
0x3BB	PUSH(MLOAD(POP(@0x6CC)))
0x3BC	SWAP1
0x3BF	PUSH(0x20 + POP(@0x6CC))
0x3C0	SWAP1
0x3C1	DUP1
0x3C2	DUP4
0x3C3	DUP4
0x3C4	PUSH(0x0)

:label37
# Stack: [[0x0 | @0x3DA] @0x3BF @0x3B7 @0x3BB @0x3BB @0x3BF @0x3B7 @0x3A4 @0x3A4 @0x6CC @0x35]
0x3C7	DUP4
0x3C8	DUP2
0x3CE	JUMPI(:label38, !(POP() < POP(@0x3BB)))

# Stack: [[@0x3DA | 0x0] @0x3BF @0x3B7 @0x3BB @0x3BB @0x3BF @0x3B7 @0x3A4 @0x3A4 @0x6CC @0x35]
0x3CF	DUP1
0x3D0	DUP3
0x3D3	DUP1
0x3D4	DUP4
0x3D6	MSTORE(POP(@0x3B7) + POP(), MLOAD(POP(@0x3BF) + POP()))
0x3D9	DUP1
0x3DA	PUSH(POP() + 0x20)
0x3DB	SWAP1
0x3DC	POP()
0x3E0	JUMP(:label37)

:label38
# Stack: [[0x0 | @0x3DA] @0x3BF @0x3B7 @0x3BB @0x3BB @0x3BF @0x3B7 @0x3A4 @0x3A4 @0x6CC @0x35]
0x3E2	POP()
0x3E3	POP()
0x3E4	POP()
0x3E5	POP()
0x3E6	SWAP1
0x3E7	POP()
0x3E8	SWAP1
0x3E9	DUP2
0x3EA	PUSH(POP(@0x3BB) + POP(@0x3B7))
0x3EB	SWAP1
0x3EE	PUSH(0x1F & POP(@0x3BB))
0x3EF	DUP1
0x3F4	JUMPI(:label39, !POP(@0x3EE))

# Stack: [@0x3EE @0x3EA @0x3A4 @0x3A4 @0x6CC @0x35]
0x3F5	DUP1
0x3F6	DUP3
0x3F7	PUSH(POP(@0x3EA) - POP(@0x3EE))
0x3F8	DUP1
0x3FC	DUP2
0x407	DUP1
0x408	MSTORE(POP(@0x3F7), ~(0x100 ** (0x20 - POP(@0x3EE)) - 0x1) & MLOAD(POP(@0x3F7)))
0x40B	PUSH(0x20 + POP(@0x3F7))
0x40C	SWAP2
0x40D	POP()

:label39
# Stack: [@0x3EE [@0x40B | @0x3EA] @0x3A4 @0x3A4 @0x6CC @0x35]
0x40F	POP()
0x410	SWAP3
0x411	POP()
0x412	POP()
0x413	POP()
0x416	PUSH(MLOAD(0x40))
0x417	DUP1
0x418	SWAP2
0x419	PUSH(POP() - POP(@0x416))
0x41A	SWAP1
0x41B	RETURN(POP(@0x416), POP(@0x419))

:label40
# Stack: [:label3 @0x35]
0x41F	PUSH(SLOAD(0x3))
0x420	DUP2
0x421	JUMP(POP(:label3))

:label41
# Stack: [:label6 @0x35]
0x423	PUSH(0x0)
0x425	DUP1
0x426	PUSH(SLOAD(POP(0x0)))
0x429	DUP1
0x433	PUSH(0x100 * !(0x1 & POP(@0x426)) - 0x1 & POP(@0x426))
0x434	PUSH(0x2)
0x436	SWAP1
0x437	PUSH(POP(@0x433) / POP(0x2))
0x438	DUP1
0x43B	PUSH(0x1F + POP(@0x437))
0x43C	PUSH(0x20)
0x43E	DUP1
0x43F	SWAP2
0x444	PUSH(0x20 + POP(@0x43B) / POP(0x20) * POP(0x20))
0x447	PUSH(MLOAD(0x40))
0x448	SWAP1
0x449	DUP2
0x44D	MSTORE(0x40, POP(@0x447) + POP(@0x444))
0x44E	DUP1
0x44F	SWAP3
0x450	SWAP2
0x451	SWAP1
0x452	DUP2
0x453	DUP2
0x454	MSTORE(POP(@0x447), POP(@0x437))
0x457	PUSH(0x20 + POP(@0x447))
0x458	DUP3
0x459	DUP1
0x45A	PUSH(SLOAD(POP(0x0)))
0x45D	DUP1
0x467	PUSH(0x100 * !(0x1 & POP(@0x45A)) - 0x1 & POP(@0x45A))
0x468	PUSH(0x2)
0x46A	SWAP1
0x46B	PUSH(POP(@0x467) / POP(0x2))
0x46C	DUP1
0x471	JUMPI(:label44, !POP(@0x46B))

# Stack: [@0x46B 0x0 @0x457 @0x437 0x0 @0x447 :label6 @0x35]
0x472	DUP1
0x479	JUMPI(:label42, 0x1F < POP(@0x46B))

# Stack: [@0x46B 0x0 @0x457 @0x437 0x0 @0x447 :label6 @0x35]
0x47A	PUSH(0x100)
0x47D	DUP1
0x47E	DUP4
0x482	DUP3
0x483	MSTORE(POP(@0x457), SLOAD(POP(0x0)) / POP(0x100) * POP(0x100))
0x484	SWAP2
0x487	PUSH(0x20 + POP(@0x457))
0x488	SWAP2
0x48C	JUMP(:label44)

:label42
# Stack: [@0x46B 0x0 @0x457 @0x437 0x0 @0x447 :label6 @0x35]
0x48E	DUP3
0x48F	PUSH(POP(@0x457) + POP(@0x46B))
0x490	SWAP2
0x491	SWAP1
0x494	MSTORE(0x0, POP(0x0))
0x499	PUSH(SHA3(0x0, 0x20))
0x49A	SWAP1

:label43
# Stack: [[@0x457 | @0x4A7] [@0x4A3 | @0x499] @0x48F @0x437 0x0 @0x447 :label6 @0x35]
0x49C	DUP2
0x49E	DUP1
0x49F	MSTORE(POP(), SLOAD(POP()))
0x4A0	SWAP1
0x4A3	PUSH(0x1 + POP())
0x4A4	SWAP1
0x4A7	PUSH(0x20 + POP())
0x4A8	DUP1
0x4A9	DUP4
0x4AE	JUMPI(:label43, POP(@0x48F) > POP(@0x4A7))

# Stack: [@0x4A7 @0x4A3 @0x48F @0x437 0x0 @0x447 :label6 @0x35]
0x4AF	DUP3
0x4B0	SWAP1
0x4B5	DUP2
0x4B6	PUSH(POP(@0x48F) + (0x1F & POP(@0x4A7) - POP(@0x48F)))
0x4B7	SWAP2

:label44
# Stack: [[@0x46B | @0x48F] [0x0 | @0x4A3] [@0x487 | @0x4B6 | @0x457] @0x437 0x0 @0x447 :label6 @0x35]
0x4B9	POP()
0x4BA	POP()
0x4BB	POP()
0x4BC	POP()
0x4BD	POP()
0x4BE	DUP2
0x4BF	JUMP(POP(:label6))

:label45
# Stack: [@0x18B :label12 @0x35]
0x4C8	DUP1
0x4CB	PUSH(MLOAD(0x40))
0x4CC	DUP1
0x4CD	DUP3
0x4D6	DUP1
0x4D7	MSTORE(POP(@0x4CB), ~0x0 & ~0x0 & POP(@0x18B))
0x4DA	PUSH(0x20 + POP(@0x4CB))
0x4DB	SWAP2
0x4DC	POP()
0x4DD	POP()
0x4E0	PUSH(MLOAD(0x40))
0x4E1	DUP1
0x4E2	SWAP2
0x4E3	PUSH(POP(@0x4DA) - POP(@0x4E0))
0x4E4	SWAP1
0x4F0	JUMPI(:label46, !!(~0x0 & SHA3(POP(@0x4E0), POP(@0x4E3)) == ~0x0 & SLOAD(0x3)))

# Stack: [@0x18B :label12 @0x35]
0x4F1	PUSH(0x0)
0x4F3	DUP1
0x4F4	REVERT()

:label46
# Stack: [@0x18B :label12 @0x35]
0x517	DUP1
0x51A	PUSH(MLOAD(0x40))
0x51B	DUP1
0x51C	DUP3
0x525	DUP1
0x526	MSTORE(POP(@0x51A), ~0x0 & ~0x0 & POP(@0x18B))
0x529	PUSH(0x20 + POP(@0x51A))
0x52A	SWAP2
0x52B	POP()
0x52C	POP()
0x52F	PUSH(MLOAD(0x40))
0x530	DUP1
0x531	SWAP2
0x532	PUSH(POP(@0x529) - POP(@0x52F))
0x533	SWAP1
0x534	LOG1(POP(@0x52F), POP(@0x532), 0x8B4A1DA1E9D54B88EBAFC9CE4677A2CA4196693B1C8500B9D1FC58D96553C5FD)
0x535	POP()
0x536	JUMP(POP(:label12))

:label47
# Stack: [:label15 @0x35]
0x53A	PUSH(SLOAD(0x1))
0x53B	DUP2
0x53C	JUMP(POP(:label15))

:label48
# Stack: [@0x20A :label18 @0x35]
0x53E	DUP1
0x53F	PUSH(0x2)
0x541	SWAP1
0x542	DUP1
0x543	PUSH(MLOAD(POP(@0x20A)))
0x544	SWAP1
0x547	PUSH(0x20 + POP(@0x20A))
0x548	SWAP1
0x549	PUSH(:label49)
0x54C	SWAP3
0x54D	SWAP2
0x54E	SWAP1
0x552	JUMP(:label63)

:label49
# Stack: [0x2 @0x20A :label18 @0x35]
0x554	POP()
0x555	POP()
0x556	JUMP(POP(:label18))

:label50
# Stack: [@0x278 @0x258 :label21 @0x35]
0x55F	DUP2
0x56A	JUMPI(:label51, !!(~0x0 & POP(@0x258) == ~0x0 & SLOAD(0x1)))

# Stack: [@0x278 @0x258 :label21 @0x35]
0x56B	PUSH(0x0)
0x56D	DUP1
0x56E	REVERT()

:label51
# Stack: [@0x278 @0x258 :label21 @0x35]
0x591	DUP1
0x594	PUSH(MLOAD(0x40))
0x595	DUP1
0x596	DUP3
0x5C3	DUP1
0x5C4	MSTORE(POP(@0x594), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & POP(@0x278))
0x5C7	PUSH(0x20 + POP(@0x594))
0x5C8	SWAP2
0x5C9	POP()
0x5CA	POP()
0x5CD	PUSH(MLOAD(0x40))
0x5CE	DUP1
0x5CF	SWAP2
0x5D0	PUSH(POP(@0x5C7) - POP(@0x5CD))
0x5D1	SWAP1
0x5D2	LOG1(POP(@0x5CD), POP(@0x5D0), 0x450DB8DA6EFBE9C22F2347F7C2021231DF1FC58D3AE9A2FA75D39FA446199305)
0x5D3	POP()
0x5D4	POP()
0x5D5	JUMP(POP(:label21))

:label52
# Stack: [:label24 @0x35]
0x5D7	PUSH(0x0)
0x5DB	PUSH(SLOAD(0x3))
0x5DC	SWAP1
0x5DD	POP()
0x5DE	SWAP1
0x5DF	JUMP(POP(:label24))

:label53
# Stack: [:label27 @0x35]
0x5E1	PUSH(0x2)
0x5E3	DUP1
0x5E4	PUSH(SLOAD(POP(0x2)))
0x5E7	DUP1
0x5F1	PUSH(0x100 * !(0x1 & POP(@0x5E4)) - 0x1 & POP(@0x5E4))
0x5F2	PUSH(0x2)
0x5F4	SWAP1
0x5F5	PUSH(POP(@0x5F1) / POP(0x2))
0x5F6	DUP1
0x5F9	PUSH(0x1F + POP(@0x5F5))
0x5FA	PUSH(0x20)
0x5FC	DUP1
0x5FD	SWAP2
0x602	PUSH(0x20 + POP(@0x5F9) / POP(0x20) * POP(0x20))
0x605	PUSH(MLOAD(0x40))
0x606	SWAP1
0x607	DUP2
0x60B	MSTORE(0x40, POP(@0x605) + POP(@0x602))
0x60C	DUP1
0x60D	SWAP3
0x60E	SWAP2
0x60F	SWAP1
0x610	DUP2
0x611	DUP2
0x612	MSTORE(POP(@0x605), POP(@0x5F5))
0x615	PUSH(0x20 + POP(@0x605))
0x616	DUP3
0x617	DUP1
0x618	PUSH(SLOAD(POP(0x2)))
0x61B	DUP1
0x625	PUSH(0x100 * !(0x1 & POP(@0x618)) - 0x1 & POP(@0x618))
0x626	PUSH(0x2)
0x628	SWAP1
0x629	PUSH(POP(@0x625) / POP(0x2))
0x62A	DUP1
0x62F	JUMPI(:label56, !POP(@0x629))

# Stack: [@0x629 0x2 @0x615 @0x5F5 0x2 @0x605 :label27 @0x35]
0x630	DUP1
0x637	JUMPI(:label54, 0x1F < POP(@0x629))

# Stack: [@0x629 0x2 @0x615 @0x5F5 0x2 @0x605 :label27 @0x35]
0x638	PUSH(0x100)
0x63B	DUP1
0x63C	DUP4
0x640	DUP3
0x641	MSTORE(POP(@0x615), SLOAD(POP(0x2)) / POP(0x100) * POP(0x100))
0x642	SWAP2
0x645	PUSH(0x20 + POP(@0x615))
0x646	SWAP2
0x64A	JUMP(:label56)

:label54
# Stack: [@0x629 0x2 @0x615 @0x5F5 0x2 @0x605 :label27 @0x35]
0x64C	DUP3
0x64D	PUSH(POP(@0x615) + POP(@0x629))
0x64E	SWAP2
0x64F	SWAP1
0x652	MSTORE(0x0, POP(0x2))
0x657	PUSH(SHA3(0x0, 0x20))
0x658	SWAP1

:label55
# Stack: [[@0x615 | @0x665] [@0x661 | @0x657] @0x64D @0x5F5 0x2 @0x605 :label27 @0x35]
0x65A	DUP2
0x65C	DUP1
0x65D	MSTORE(POP(), SLOAD(POP()))
0x65E	SWAP1
0x661	PUSH(0x1 + POP())
0x662	SWAP1
0x665	PUSH(0x20 + POP())
0x666	DUP1
0x667	DUP4
0x66C	JUMPI(:label55, POP(@0x64D) > POP(@0x665))

# Stack: [@0x665 @0x661 @0x64D @0x5F5 0x2 @0x605 :label27 @0x35]
0x66D	DUP3
0x66E	SWAP1
0x673	DUP2
0x674	PUSH(POP(@0x64D) + (0x1F & POP(@0x665) - POP(@0x64D)))
0x675	SWAP2

:label56
# Stack: [[@0x629 | @0x64D] [@0x661 | 0x2] [@0x615 | @0x645 | @0x674] @0x5F5 0x2 @0x605 :label27 @0x35]
0x677	POP()
0x678	POP()
0x679	POP()
0x67A	POP()
0x67B	POP()
0x67C	DUP2
0x67D	JUMP(POP(:label27))

:label57
# Stack: [@0x37A @0x36C :label33 @0x35]
0x686	DUP2
0x691	JUMPI(:label58, !!(~0x0 & POP(@0x36C) == ~0x0 & SLOAD(0x1)))

# Stack: [@0x37A @0x36C :label33 @0x35]
0x692	PUSH(0x0)
0x694	DUP1
0x695	REVERT()

:label58
# Stack: [@0x37A @0x36C :label33 @0x35]
0x697	DUP1
0x698	PUSH(0x3)
0x69A	DUP1
0x69E	PUSH(~0x0 & POP(@0x37A))
0x69F	SWAP1
0x6A0	SSTORE(POP(0x3), POP(@0x69E))
0x6A1	POP()
0x6A2	POP()
0x6A3	POP()
0x6A4	JUMP(POP(:label33))

:label59
# Stack: [:label36 @0x35]
0x6A6	PUSH(0x60)
0x6A8	PUSH(0x2)
0x6AA	DUP1
0x6AB	PUSH(SLOAD(POP(0x2)))
0x6AE	DUP1
0x6B8	PUSH(0x100 * !(0x1 & POP(@0x6AB)) - 0x1 & POP(@0x6AB))
0x6B9	PUSH(0x2)
0x6BB	SWAP1
0x6BC	PUSH(POP(@0x6B8) / POP(0x2))
0x6BD	DUP1
0x6C0	PUSH(0x1F + POP(@0x6BC))
0x6C1	PUSH(0x20)
0x6C3	DUP1
0x6C4	SWAP2
0x6C9	PUSH(0x20 + POP(@0x6C0) / POP(0x20) * POP(0x20))
0x6CC	PUSH(MLOAD(0x40))
0x6CD	SWAP1
0x6CE	DUP2
0x6D2	MSTORE(0x40, POP(@0x6CC) + POP(@0x6C9))
0x6D3	DUP1
0x6D4	SWAP3
0x6D5	SWAP2
0x6D6	SWAP1
0x6D7	DUP2
0x6D8	DUP2
0x6D9	MSTORE(POP(@0x6CC), POP(@0x6BC))
0x6DC	PUSH(0x20 + POP(@0x6CC))
0x6DD	DUP3
0x6DE	DUP1
0x6DF	PUSH(SLOAD(POP(0x2)))
0x6E2	DUP1
0x6EC	PUSH(0x100 * !(0x1 & POP(@0x6DF)) - 0x1 & POP(@0x6DF))
0x6ED	PUSH(0x2)
0x6EF	SWAP1
0x6F0	PUSH(POP(@0x6EC) / POP(0x2))
0x6F1	DUP1
0x6F6	JUMPI(:label62, !POP(@0x6F0))

# Stack: [@0x6F0 0x2 @0x6DC @0x6BC 0x2 @0x6CC 0x60 :label36 @0x35]
0x6F7	DUP1
0x6FE	JUMPI(:label60, 0x1F < POP(@0x6F0))

# Stack: [@0x6F0 0x2 @0x6DC @0x6BC 0x2 @0x6CC 0x60 :label36 @0x35]
0x6FF	PUSH(0x100)
0x702	DUP1
0x703	DUP4
0x707	DUP3
0x708	MSTORE(POP(@0x6DC), SLOAD(POP(0x2)) / POP(0x100) * POP(0x100))
0x709	SWAP2
0x70C	PUSH(0x20 + POP(@0x6DC))
0x70D	SWAP2
0x711	JUMP(:label62)

:label60
# Stack: [@0x6F0 0x2 @0x6DC @0x6BC 0x2 @0x6CC 0x60 :label36 @0x35]
0x713	DUP3
0x714	PUSH(POP(@0x6DC) + POP(@0x6F0))
0x715	SWAP2
0x716	SWAP1
0x719	MSTORE(0x0, POP(0x2))
0x71E	PUSH(SHA3(0x0, 0x20))
0x71F	SWAP1

:label61
# Stack: [[@0x6DC | @0x72C] [@0x71E | @0x728] @0x714 @0x6BC 0x2 @0x6CC 0x60 :label36 @0x35]
0x721	DUP2
0x723	DUP1
0x724	MSTORE(POP(), SLOAD(POP()))
0x725	SWAP1
0x728	PUSH(0x1 + POP())
0x729	SWAP1
0x72C	PUSH(0x20 + POP())
0x72D	DUP1
0x72E	DUP4
0x733	JUMPI(:label61, POP(@0x714) > POP(@0x72C))

# Stack: [@0x72C @0x728 @0x714 @0x6BC 0x2 @0x6CC 0x60 :label36 @0x35]
0x734	DUP3
0x735	SWAP1
0x73A	DUP2
0x73B	PUSH(POP(@0x714) + (0x1F & POP(@0x72C) - POP(@0x714)))
0x73C	SWAP2

:label62
# Stack: [[@0x6F0 | @0x714] [@0x728 | 0x2] [@0x6DC | @0x70C | @0x73B] @0x6BC 0x2 @0x6CC 0x60 :label36 @0x35]
0x73E	POP()
0x73F	POP()
0x740	POP()
0x741	POP()
0x742	POP()
0x743	SWAP1
0x744	POP()
0x745	SWAP1
0x746	JUMP(POP(:label36))

:label63
# Stack: [@0x543 @0x547 0x2 :label49 @0x20A :label18 @0x35]
0x748	DUP3
0x749	DUP1
0x74A	PUSH(SLOAD(POP(0x2)))
0x74D	DUP1
0x757	PUSH(0x100 * !(0x1 & POP(@0x74A)) - 0x1 & POP(@0x74A))
0x758	PUSH(0x2)
0x75A	SWAP1
0x75B	PUSH(POP(@0x757) / POP(0x2))
0x75C	SWAP1
0x75F	MSTORE(0x0, POP(0x2))
0x764	PUSH(SHA3(0x0, 0x20))
0x765	SWAP1
0x768	PUSH(0x1F + POP(@0x75B))
0x769	PUSH(0x20)
0x76B	SWAP1
0x76D	DUP1
0x76E	PUSH(POP(@0x764) + POP(@0x768) / POP(0x20))
0x76F	SWAP3
0x770	DUP3
0x777	JUMPI(:label64, 0x1F < POP(@0x543))

# Stack: [@0x547 @0x764 @0x543 @0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x778	DUP1
0x77E	DUP3
0x77F	DUP1
0x782	DUP5
0x783	SSTORE(POP(0x2), POP(@0x543) + POP(@0x543) | ~0xFF & MLOAD(POP(@0x547)))
0x787	JUMP(:label66)

:label64
# Stack: [@0x547 @0x764 @0x543 @0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x789	DUP3
0x78A	DUP1
0x78F	DUP5
0x790	SSTORE(POP(0x2), 0x1 + POP(@0x543) + POP(@0x543))
0x791	DUP3
0x796	JUMPI(:label66, !POP(@0x543))

# Stack: [@0x547 @0x764 @0x543 @0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x797	SWAP2
0x798	DUP3
0x799	PUSH(POP(@0x547) + POP(@0x543))

:label65
# Stack: [@0x799 [@0x764 | @0x7AF] [@0x7AA | @0x547] @0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x79B	DUP3
0x79C	DUP2
0x7A2	JUMPI(:label66, !(POP(@0x799) > POP()))

# Stack: [@0x799 [@0x764 | @0x7AF] [@0x547 | @0x7AA] @0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x7A3	DUP3
0x7A5	DUP2
0x7A6	SSTORE(POP(), MLOAD(POP()))
0x7A7	SWAP2
0x7AA	PUSH(0x20 + POP())
0x7AB	SWAP2
0x7AC	SWAP1
0x7AF	PUSH(0x1 + POP())
0x7B0	SWAP1
0x7B4	JUMP(:label65)

:label66
# Stack: [[@0x547 | @0x799] [@0x764 | @0x7AF] [@0x543 | @0x7AA | @0x547] @0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x7B7	POP()
0x7B8	SWAP1
0x7B9	POP()
0x7BA	PUSH(:label67)
0x7BD	SWAP2
0x7BE	SWAP1
0x7C2	JUMP(:label68)

:label67
# Stack: [@0x76E 0x2 :label49 @0x20A :label18 @0x35]
0x7C4	POP()
0x7C5	SWAP1
0x7C6	JUMP(POP(:label49))

:label68
# Stack: [[@0x764 | @0x7AF] @0x76E :label67 0x2 :label49 @0x20A :label18 @0x35]
0x7C8	PUSH(:label71)
0x7CB	SWAP2
0x7CC	SWAP1

:label69
# Stack: [[@0x7AF | @0x764 | @0x7E0] @0x76E :label71 :label67 0x2 :label49 @0x20A :label18 @0x35]
0x7CE	DUP1
0x7CF	DUP3
0x7D5	JUMPI(:label70, !(POP(@0x76E) > POP()))

# Stack: [[@0x764 | @0x7E0 | @0x7AF] @0x76E :label71 :label67 0x2 :label49 @0x20A :label18 @0x35]
0x7D8	DUP1
0x7D9	PUSH(0x0)
0x7DB	SWAP1
0x7DC	SSTORE(POP(), POP(0x0))
0x7DD	POP(0x0)
0x7E0	PUSH(0x1 + POP())
0x7E4	JUMP(:label69)

:label70
# Stack: [[@0x7E0 | @0x764 | @0x7AF] @0x76E :label71 :label67 0x2 :label49 @0x20A :label18 @0x35]
0x7E6	POP()
0x7E7	SWAP1
0x7E8	JUMP(POP(:label71))

:label71
# Stack: [@0x76E :label67 0x2 :label49 @0x20A :label18 @0x35]
0x7EA	SWAP1
0x7EB	JUMP(POP(:label67))


